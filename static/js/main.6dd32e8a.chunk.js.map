{"version":3,"sources":["components/FromBuilder/QuestinInput/QuestionInput.js","components/FromBuilder/TextInput/TextInput.js","components/FromBuilder/NumberInput/NumberInput.js","components/FromBuilder/RadioInput/RadioInput.js","components/BuildWrapper/BuildWrapper.js","containers/FormBuilder/FormWrapper/FormWrapper.js","containers/FormBuilder/FormBuilder.js","components/Input/Input.js","containers/FormsList/Form/Form.js","containers/FormsList/FormsList.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["QuestionInput","props","react_default","a","createElement","className","type","name","placeholder","value","question","onChange","handleChange","onClick","handleAddInput","disabled","disableAdd","handleDelete","index","handleSave","disableSave","TextInput","NumberInput","condition","RadioInput","BuildWrapper","FormBuilder_FormWrapper_FormWrapper","FormWrapper","state","subInput","saved","newImputs","Object","toConsumableArray","_this","splice","setState","event","target","defineProperty","handleSubInput","newSubInputs","handleDataToPush","length","data","answers","push","dataToPush","newState","newData","newType","newSave","objectSpread","validateSave","validateAdd","conditionElement","_this2","this","FromBuilder_RadioInput_RadioInput","FromBuilder_TextInput_TextInput","FromBuilder_NumberInput_NumberInput","FromBuilder_QuestinInput_QuestionInput","map","el","components_BuildWrapper_BuildWrapper","key","Component","FormBuilder","form","newForm","handleSaveForm","idb","open","then","db","tx","transaction","objectStore","put","complete","result","console","log","Input","inputElement","concat","Form","formJson","formResult","validateInput","forEach","answer","handleSubmit","preventDefault","newResult","endInfo","element","inputType","onSubmit","components_Input_Input","FormsList","forms","_getAllData","asyncToGenerator","regenerator_default","mark","_callee","store","allSavedItems","wrap","_context","prev","next","sent","objectStoreNames","contains","getAll","close","abrupt","stop","apply","arguments","getAllData","elements","FormsList_Form_Form","withRouter","history","App","upgradeDB","createObjectStore","autoIncrement","components_Nav_Nav","Switch","Route","path","component","Boolean","window","location","hostname","match","app","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6dd32e8a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './QuestionInput.css';\n\nconst QuestionInput = (props) => {\n        return (\n            <div>\n                <div>\n                    <div className=\"FormControl\">\n                        <label>Question</label>\n                        <input \n                            type=\"text\" \n                            name=\"question\" \n                            placeholder=\"Your question?\"\n                            value={props.question}\n                            onChange={props.handleChange}/>\n                    </div>\n                    <div className=\"FormControl\">\n                        <label>Type</label>\n                        <select \n                                onChange={props.handleChange}\n                                name=\"type\">\n                            <option value=\"text\">Text</option>\n                            <option value=\"number\">Number</option>\n                            <option value=\"yes/no\">Yes/No</option>\n                        </select>\n                    </div>\n                </div>\n                <button onClick={props.handleAddInput}\n                        disabled={!props.disableAdd}>\n                    Add Sub-Input\n                </button>\n                <button onClick={() => props.handleDelete(props.index)}>\n                    Delete\n                </button>\n                <button onClick={props.handleSave}\n                        disabled={!props.disableSave}>\n                    Save Question\n                </button>\n            </div>\n        )\n}\n\nexport default QuestionInput;","import React from 'react';\n\nconst TextInput = (props) => {\n        return (\n                <div className=\"FormControl\">\n                    <label>Condiotion</label>\n                    <select>\n                        <option value=\"===\">Equals</option>\n                    </select>\n                    <input \n                        type=\"text\" \n                        name=\"value\" \n                        onChange={props.handleChange} \n                        value={props.value}/>\n                </div>\n        )\n}\n\nexport default TextInput;","import React from 'react';\n\nconst NumberInput = (props) => {\n        return (\n            <div>\n                <div className=\"FormControl\">\n                    <label>Condiotion</label>\n                    <select value={props.condition}\n                            name=\"condition\"\n                            onChange={props.handleChange}>\n                        <option value=\"===\">Equals</option>\n                        <option value=\">\">Greather than</option>\n                        <option value=\"<\">Less than</option>\n                    </select>\n                    <input type=\"number\" \n                           name=\"value\"\n                           onChange={props.handleChange} \n                           value={props.value}/>\n                </div>\n            </div>\n        )\n}\n\nexport default NumberInput;","import React from 'react';\n\nconst RadioInput = (props) =>{\n        return (\n                <div className=\"FormControl\">\n                    <label>Condiotion</label>\n                    <select name=\"condition\" onChange={props.handleChange}>\n                        <option value=\"===\">Equals</option>\n                    </select>\n                    <select name=\"value\" \n                        onChange={props.handleChange}\n                        value={props.value}>\n                        <option value=\"no\">No</option>\n                        <option value=\"yes\">Yes</option>\n                    </select>\n                </div>\n        )\n}\n\nexport default RadioInput;","import React from 'react';\n\nimport FormWrapper from '../../containers/FormBuilder/FormWrapper/FormWrapper';\n\nconst BuildWrapper = (props) => {\n    return (\n        <div>\n            <FormWrapper {...props}/>\n        </div>\n    )\n}\n\nexport default BuildWrapper;","import React, { Component } from 'react';\n\nimport QuestionInput from '../../../components/FromBuilder/QuestinInput/QuestionInput';\nimport TextInput from '../../../components/FromBuilder/TextInput/TextInput';\nimport NumberInput from '../../../components/FromBuilder/NumberInput/NumberInput';\nimport RadioInput from '../../../components/FromBuilder/RadioInput/RadioInput';\nimport BuildWrapper from '../../../components/BuildWrapper/BuildWrapper'\n\nclass FormWrapper extends Component {\n    state = {\n        question: '',\n        type: 'text',\n        condition: \"===\",\n        value: '',\n        subInput: [],\n        saved: false\n    }\n\n    handleDelete = (index) => {\n        const newImputs = [...this.state.subInput]\n        newImputs.splice(index, 1);\n        this.setState({\n            subInput: newImputs\n        })  \n    }\n\n    handleChange = (event) => {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        })\n    }\n\n    handleSubInput = () => {\n        this.props.handleSave(this.handleDataToPush(), this.props.index);\n        let newSubInputs;\n        if(!this.state.subInput.length === 0){\n            newSubInputs = [...this.props.data.answers];\n        } else {\n            newSubInputs = [...this.state.subInput];\n        }\n\n        if(this.state.type === \"yes/no\"){\n            newSubInputs.push({ type: \"yes/no\" })\n            this.setState({\n                subInput: newSubInputs\n            });\n        } else if(this.state.type === \"text\"){\n            newSubInputs.push({ type: \"text\" })\n            this.setState({\n                subInput: newSubInputs\n            });\n        } else if(this.state.type === \"number\"){\n            newSubInputs.push({  type: \"number\" })\n            this.setState({\n                subInput: newSubInputs\n            });\n        }\n    }\n\n    handleSave = (dataToPush, index) => {\n        const newState = [...this.state.subInput];\n        const newData = newState[index];\n        if(!this.state.saved){\n        newData.question = dataToPush.question;\n        newData.condition = dataToPush.condition;\n        newData.newType = dataToPush.type;\n        newData.value = dataToPush.value;\n        newData.answers = [];\n        } else {\n            newData.answers = dataToPush.answers;\n        }\n        newState[index] = newData\n\n        this.setState({\n            subInput: newState,\n            saved: true\n        }, () => {\n            const newSave = {...this.props.data,\n                answers: this.state.subInput}\n\n            this.props.handleSave(newSave, this.props.index);\n        })\n    }\n\n    validateSave = () => {\n        if(this.state.question && (this.props.value || this.state.value) && !this.state.subInput.length){\n            return true;\n        }\n        return false;\n    }\n\n    validateAdd = () => {\n        if(this.state.question && (this.props.value || this.state.value)){\n            return true;\n        }\n        return false;\n    }\n\n    handleDataToPush = () => {\n        const objectToPush = {\n            question: this.state.question,\n            type: this.state.type,\n            condition: this.state.condition,\n            value: this.state.value,\n            answers: []\n        };\n        return objectToPush;\n    }\n\n    render() {\n        let conditionElement;\n        if(this.props.type === \"yes/no\"){\n            conditionElement =  <RadioInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;   \n        } else if(this.props.type === \"text\"){\n            conditionElement = <TextInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;\n        } else if(this.props.type === \"number\"){\n            conditionElement = <NumberInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;\n        }\n\n        return (\n            <div className=\"Margin\">\n                <div className=\"Form\">\n                    {conditionElement}\n                    <QuestionInput \n                        handleChange={this.handleChange}\n                        handleDelete={this.props.handleDelete}\n                        index={this.props.index}\n                        handleSave={() => this.props.handleSave(this.handleDataToPush(), this.props.index)}\n                        handleAddInput={this.handleSubInput}\n                        question={this.state.question}\n                        disableSave={this.validateSave()}\n                        disableAdd={this.validateAdd()}\n                        type={this.state.type}/>\n                </div>\n                {this.state.subInput.map((el,index) => <BuildWrapper \n                                                    type={el.type}\n                                                    key={index}\n                                                    index={index}\n                                                    data={this.state.subInput[index]}\n                                                    handleSave={this.handleSave}\n                                                    handleDelete={(index) => this.handleDelete(index)} />)}\n            </div>\n        )\n    }\n}\n\nexport default FormWrapper;","import React, { Component } from 'react';\nimport idb from 'idb';\n\nimport FormWrapper from './FormWrapper/FormWrapper';\n\nclass FormBuilder extends Component {\n    state = {\n        form: []\n    }\n\n    handleAddInput = () => {\n        const newState = [...this.state.form];\n        newState.push([]);\n        this.setState({\n            form: newState\n        })\n    }\n\n    handleDelete = (index) => {\n        const newState = [...this.state.form];\n        newState.splice(index, 1);\n        this.setState({\n            form: newState\n        })\n    }\n\n    handleSave = (data, index) => {\n        const newForm = [...this.state.form];\n        newForm[index] = data;\n        this.setState({\n            form: newForm\n        })\n    }\n\n    handleSaveForm = (index) => {\n        const data = this.state.form[index];\n            idb.open('db-FormBuilder', 2)\n            .then(db => {\n                let tx = db.transaction('Forms', 'readwrite');\n                let store = tx.objectStore('Forms')\n                store.put(data);\n                return tx.complete;\n            })\n            .then( result => console.log('object stored'))\n    }\n\n    render(){\n        return (\n            <div>\n                <h3>Form builder</h3>\n                {this.state.form.map((form,index) => \n                    <div key={index}>\n                        <FormWrapper \n                                \n                                index={index}\n                                value\n                                data={this.state.form[index]}\n                                handleSave={this.handleSave} \n                                handleDelete={() => this.handleDelete(index)} />\n                        <button onClick={() => this.handleSaveForm(index)}>Store Form</button>\n                    </div>)}             \n                <button onClick={this.handleAddInput}>Add Input</button>\n            </div>\n        )\n    }\n}\n\nexport default FormBuilder;","import React from 'react';\n\nconst Input = (props) => {\n    \n    let inputElement = null;\n    \n    switch ( props.type ) {\n        case ( 'text' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <input type=\"text\" \n                            name=\"value\" \n                            value={props.value} \n                            onChange={props.onChange} />\n                </div>\n            );\n            break;\n        case ( 'number' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <input type=\"number\" \n                            name=\"value\" \n                            value={props.value} \n                            onChange={props.onChange} />\n                </div>\n            );\n            break;\n        case ( 'yes/no' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <select name=\"value\" \n                            onChange={props.onChange} \n                            value={props.value}>\n                        <option value=\"no\">No</option>\n                        <option value=\"yes\">Yes</option>\n                    </select>   \n                </div>\n            );\n            break;\n        default:\n                inputElement = null;\n    }\n\n    return (\n        <div>\n            {inputElement}\n        </div>\n        \n    )\n}\n\nexport default Input;","import React, { Component } from 'react';\n\nimport Input from '../../../components/Input/Input';\n\nclass Form extends Component {\n    state = {\n        value: '',\n        formJson: '',\n        formResult: []\n    }\n\n    componentDidMount(){\n        this.setState({\n            formJson: this.props.data\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            value: event.target.value\n        }, () => this.validateInput())\n    }\n\n    validateInput = () => {\n        this.state.formJson.answers.forEach(el => {\n            if(el.value === this.state.value){\n                const answers = [...this.state.formResult];\n                answers.push({ question: this.state.formJson.question, answer: this.state.value })\n                this.setState({\n                    formJson: el,\n                    value: '',\n                    formResult: answers\n                })\n            }\n        })  \n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const newResult = [...this.state.formResult];\n                newResult.push({question: this.state.formJson.question, answer: this.state.value });\n                this.setState({\n                    formResult: newResult\n                }, () => console.log(this.state.formResult) )\n    }\n\n    render(){\n        let endInfo = null;\n        const element = {...this.state.formJson};\n        if(this.state.formJson){\n            if(element.answers.length === 0){\n                endInfo = <p>No more questions. Thanks</p>;\n            }\n        }\n        \n        let inputType = element.newType\n        if(!element.newType){\n            inputType = element.type\n        }\n\n        return (\n            <div>\n                <form className=\"Form\" onSubmit={this.handleSubmit}>\n                    <Input \n                        type={inputType} \n                        question={element.question} \n                        name=\"value\"\n                        value={this.state.value}\n                        onChange={this.handleChange}/>\n                    {endInfo}\n                    <button type=\"submit\" disabled={!endInfo}>Submit</button>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport idb from 'idb';\n\nimport Form from './Form/Form';\n\nclass FormsList extends Component {\n    state = {\n        forms: null\n    }\n\n    componentDidMount(){\n        async function getAllData() {\n           \n            let db = await idb.open('db-FormBuilder', 2)\n\n            if(db.objectStoreNames.contains('Forms')){\n                let tx = db.transaction('Forms', 'readonly')\n                let store = tx.objectStore('Forms')\n            \n                let allSavedItems = await store.getAll()\n            \n                db.close()\n\n                return allSavedItems\n            } \n            db.close();    \n        }\n\n        getAllData()\n            .then(result => {\n                this.setState({\n                    forms: result\n                })\n            });\n    }\n\n    render(){\n        let elements = null;\n        if(this.state.forms){\n            elements = this.state.forms.map((el,index) => <Form key={index} data={el} />);\n        }\n        return (\n            <div>\n                <h3>Your Forms</h3>\n                {elements}\n            </div>\n        )\n    }\n}\n\nexport default FormsList;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport './Nav.css';\n\nconst Nav = (props) => {\n    const handleBuilder = () => {\n        props.history.push('/form-builder');\n    }\n\n    const handleForm = () => {\n        props.history.push('/form');\n    }\n\n    return (\n        <nav>\n            <ul className=\"Nav\">\n                <li onClick={handleBuilder}>Form Builder</li>\n                <li onClick={handleForm}>From</li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default withRouter(Nav);","import React, { Component } from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport idb from 'idb';\n\nimport FormBuilder from './containers/FormBuilder/FormBuilder';\nimport FormsList from './containers/FormsList/FormsList';\nimport Nav from './components/Nav/Nav';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount(){\n    idb.open('db-FormBuilder', 2, upgradeDB => upgradeDB.createObjectStore('Forms', { autoIncrement: true }))\n      .then(db => console.log(\"Object created\"))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Skygate form</h1>\n        </header>\n        <Nav />\n        <Switch>\n          <Route path=\"/form-builder\" component={FormBuilder} />\n          <Route path=\"/form\" component={FormsList} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n)\n\nReactDOM.render(app , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}