{"version":3,"sources":["components/FormBuilder/QuestionInput/QuestionInput.js","components/FormBuilder/TextInput/TextInput.js","components/FormBuilder/NumberInput/NumberInput.js","components/FormBuilder/RadioInput/RadioInput.js","components/BuildWrapper/BuildWrapper.js","containers/FormBuilder/FormWrapper/FormWrapper.js","containers/FormBuilder/FormBuilder.js","components/Input/Input.js","containers/FormsList/Form/Form.js","containers/FormsList/FormsList.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["QuestionInput","props","react_default","a","createElement","className","type","name","placeholder","value","question","onChange","handleChange","onClick","handleAddInput","disabled","disableAdd","handleDelete","index","handleSave","disableSave","TextInput","NumberInput","condition","RadioInput","BuildWrapper","FormBuilder_FormWrapper_FormWrapper","FormWrapper","state","subInput","newInputs","Object","toConsumableArray","_this","splice","setState","event","target","defineProperty","handleSubInput","newSubInputs","handleDataToPush","length","data","answers","push","dataToPush","newState","newData","newType","newSave","objectSpread","validateSave","validateAdd","conditionElement","_this2","this","FormBuilder_RadioInput_RadioInput","FormBuilder_TextInput_TextInput","FormBuilder_NumberInput_NumberInput","FormBuilder_QuestionInput_QuestionInput","map","el","components_BuildWrapper_BuildWrapper","key","Component","FormBuilder","form","newForm","handleSaveForm","idb","open","then","db","tx","transaction","objectStore","put","complete","result","console","log","Input","inputElement","concat","Form","formJson","formResult","validateInput","forEach","chceckCondition","answer","Number","handleSubmit","preventDefault","newResult","endInfo","element","inputType","onSubmit","components_Input_Input","FormsList","forms","_getAllData","asyncToGenerator","regenerator_default","mark","_callee","store","allSavedItems","wrap","_context","prev","next","sent","objectStoreNames","contains","getAll","close","abrupt","stop","apply","arguments","getAllData","elements","FormsList_Form_Form","withRouter","history","App","upgradeDB","createObjectStore","autoIncrement","components_Nav_Nav","Switch","Route","path","component","Boolean","window","location","hostname","match","app","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iXA2CeA,SAvCO,SAACC,GACf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACIE,KAAK,OACLC,KAAK,WACLC,YAAY,iBACZC,MAAOR,EAAMS,SACbC,SAAUV,EAAMW,gBAExBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACQO,SAAUV,EAAMW,aAChBL,KAAK,QACTL,EAAAC,EAAAC,cAAA,UAAQK,MAAM,QAAd,QACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,UAAd,UACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,UAAd,aAIZP,EAAAC,EAAAC,cAAA,UAAQS,QAASZ,EAAMa,eACfC,UAAWd,EAAMe,YADzB,iBAIAd,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMZ,EAAMgB,aAAahB,EAAMiB,SAAhD,UAGAhB,EAAAC,EAAAC,cAAA,UAAQS,QAASZ,EAAMkB,WACfJ,UAAWd,EAAMmB,aADzB,oBCjBDC,EAhBG,SAACpB,GACX,OACQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,UAAQK,MAAM,OAAd,WAEJP,EAAAC,EAAAC,cAAA,SACIE,KAAK,OACLC,KAAK,QACLI,SAAUV,EAAMW,aAChBH,MAAOR,EAAMQ,UCUtBa,EArBK,SAACrB,GACb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UAAQK,MAAOR,EAAMsB,UACbhB,KAAK,YACLI,SAAUV,EAAMW,cACpBV,EAAAC,EAAAC,cAAA,UAAQK,MAAM,OAAd,UACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,KAAd,iBACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,KAAd,cAEJP,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SACLC,KAAK,QACLI,SAAUV,EAAMW,aAChBH,MAAOR,EAAMQ,WCGzBe,EAlBI,SAACvB,GACZ,OACQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UAAQG,KAAK,YAAYI,SAAUV,EAAMW,cACrCV,EAAAC,EAAAC,cAAA,UAAQK,MAAM,OAAd,WAEJP,EAAAC,EAAAC,cAAA,UAAQG,KAAK,QACTI,SAAUV,EAAMW,aAChBH,MAAOR,EAAMQ,OACbP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,IAAd,UACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,MAAd,MACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,OAAd,UCFTgB,EARM,SAACxB,GAClB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsB,EAAgBzB,KC0Id0B,6MAxIXC,MAAQ,CACJlB,SAAU,GACVJ,KAAM,OACNiB,UAAW,MACXd,MAAO,GACPoB,SAAU,MAGdZ,aAAe,SAACC,GACZ,IAAMY,EAASC,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMC,UACjCC,EAAUI,OAAOhB,EAAO,GACxBe,EAAKE,SAAS,CACVN,SAAUC,OAIlBlB,aAAe,SAACwB,GACZ,IAAM7B,EAAO6B,EAAMC,OAAO9B,KAC1B0B,EAAKE,SAALJ,OAAAO,EAAA,EAAAP,CAAA,GACKxB,EAAO6B,EAAMC,OAAO5B,WAI7B8B,eAAiB,WAEb,IAAIC,EADJP,EAAKhC,MAAMkB,WAAWc,EAAKQ,mBAAoBR,EAAKhC,MAAMiB,QAGtDsB,EAD+B,KAA/BP,EAAKL,MAAMC,SAASa,OACRX,OAAAC,EAAA,EAAAD,CAAOE,EAAKhC,MAAM0C,KAAKC,SAEvBb,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMC,WAGrBgB,KAAK,CAAEvC,KAAM2B,EAAKL,MAAMtB,OAErC2B,EAAKE,SAAS,CACVN,SAAUW,OAIlBrB,WAAa,SAAC2B,EAAY5B,GACtB,IAAM6B,EAAQhB,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMC,UAC1BmB,EAAUD,EAAS7B,GACzB8B,EAAQtC,SAAWoC,EAAWpC,SAC9BsC,EAAQzB,UAAYuB,EAAWvB,UAC3ByB,EAAQC,UACRD,EAAQC,QAAUH,EAAWxC,MAEjC0C,EAAQvC,MAAQqC,EAAWrC,MACvBuC,EAAQJ,QAGRI,EAAQJ,QAAUE,EAAWF,QAFjCI,EAAQJ,QAAU,GAIlBG,EAAS7B,GAAS8B,EAElBf,EAAKE,SAAS,CACVN,SAAUkB,GACX,WACC,IAAMG,EAAOnB,OAAAoB,EAAA,EAAApB,CAAA,GAAOE,EAAKhC,MAAM0C,KAAlB,CACTC,QAASX,EAAKL,MAAMC,WAExBI,EAAKhC,MAAMkB,WAAW+B,EAASjB,EAAKhC,MAAMiB,YAIlDkC,aAAe,WACX,SAAGnB,EAAKL,MAAMlB,WAAauB,EAAKhC,MAAMQ,QAASwB,EAAKL,MAAMnB,OAAWwB,EAAKL,MAAMC,SAASa,WAM7FW,YAAc,WACV,SAAGpB,EAAKL,MAAMlB,WAAauB,EAAKhC,MAAMQ,QAASwB,EAAKL,MAAMnB,UAM9DgC,iBAAmB,WAQf,MAPqB,CACjB/B,SAAUuB,EAAKL,MAAMlB,SACrBJ,KAAM2B,EAAKL,MAAMtB,KACjBiB,UAAWU,EAAKL,MAAML,UACtBd,MAAOwB,EAAKL,MAAMnB,MAClBmC,QAAS,6EAKR,IACDU,EADCC,EAAAC,KAmBL,MAjBuB,WAApBA,KAAKvD,MAAMK,KACVgD,EAAoBpD,EAAAC,EAAAC,cAACqD,EAAD,CACI7C,aAAc4C,KAAK5C,aACnBH,MAAO+C,KAAK5B,MAAMnB,MAClBc,UAAWiC,KAAK5B,MAAML,YACpB,SAApBiC,KAAKvD,MAAMK,KACjBgD,EAAmBpD,EAAAC,EAAAC,cAACsD,EAAD,CACK9C,aAAc4C,KAAK5C,aACnBH,MAAO+C,KAAK5B,MAAMnB,MAClBc,UAAWiC,KAAK5B,MAAML,YACpB,WAApBiC,KAAKvD,MAAMK,OACjBgD,EAAmBpD,EAAAC,EAAAC,cAACuD,EAAD,CACK/C,aAAc4C,KAAK5C,aACnBH,MAAO+C,KAAK5B,MAAMnB,MAClBc,UAAWiC,KAAK5B,MAAML,aAI9CrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACViD,EACDpD,EAAAC,EAAAC,cAACwD,EAAD,CACIhD,aAAc4C,KAAK5C,aACnBK,aAAcuC,KAAKvD,MAAMgB,aACzBC,MAAOsC,KAAKvD,MAAMiB,MAClBC,WAAY,kBAAMoC,EAAKtD,MAAMkB,WAAWoC,EAAKd,mBAAoBc,EAAKtD,MAAMiB,QAC5EJ,eAAgB0C,KAAKjB,eACrB7B,SAAU8C,KAAK5B,MAAMlB,SACrBU,YAAaoC,KAAKJ,eAClBpC,WAAYwC,KAAKH,cACjB/C,KAAMkD,KAAK5B,MAAMtB,QAExBkD,KAAK5B,MAAMC,SAASgC,IAAI,SAACC,EAAG5C,GAAJ,OAAchB,EAAAC,EAAAC,cAAC2D,EAAD,CACHzD,KAAMwD,EAAGxD,KACT0D,IAAK9C,EACLA,MAAOA,EACPyB,KAAMY,EAAK3B,MAAMC,SAASX,GAC1BC,WAAYoC,EAAKpC,WACjBF,aAAc,SAACC,GAAD,OAAWqC,EAAKtC,aAAaC,gBAnIrE+C,aC4DXC,6MA9DXtC,MAAQ,CACJuC,KAAM,MAGVrD,eAAiB,WACb,IAAMiC,EAAQhB,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMuC,MAChCpB,EAASF,KAAK,IACdZ,EAAKE,SAAS,CACVgC,KAAMpB,OAId9B,aAAe,SAACC,GACZ,IAAM6B,EAAQhB,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMuC,MAChCpB,EAASb,OAAOhB,EAAO,GACvBe,EAAKE,SAAS,CACVgC,KAAMpB,OAId5B,WAAa,SAACwB,EAAMzB,GAChB,IAAMkD,EAAOrC,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMuC,MAC/BC,EAAQlD,GAASyB,EACjBV,EAAKE,SAAS,CACVgC,KAAMC,OAIdC,eAAiB,SAACnD,GACd,IAAMyB,EAAOV,EAAKL,MAAMuC,KAAKjD,GACzBoD,IAAIC,KAAK,iBAAkB,GAC1BC,KAAK,SAAAC,GACF,IAAIC,EAAKD,EAAGE,YAAY,QAAS,aAGjC,OAFYD,EAAGE,YAAY,SACrBC,IAAIlC,GACH+B,EAAGI,WAEbN,KAAM,SAAAO,GAAM,OAAIC,QAAQC,IAAI,4FAG7B,IAAA1B,EAAAC,KACJ,OACItD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BACCoD,KAAK5B,MAAMuC,KAAKN,IAAI,SAACM,EAAKjD,GAAN,OACjBhB,EAAAC,EAAAC,cAAA,OAAK4D,IAAK9C,GACNhB,EAAAC,EAAAC,cAACsB,EAAD,CAEQR,MAAOA,EACPT,OAAK,EACLkC,KAAMY,EAAK3B,MAAMuC,KAAKjD,GACtBC,WAAYoC,EAAKpC,WACjBF,aAAc,kBAAMsC,EAAKtC,aAAaC,MAC9ChB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAM0C,EAAKc,eAAenD,IACnCH,UAAWwC,EAAK3B,MAAMuC,KAAKjD,GAAOR,UAD1C,iBAGRR,EAAAC,EAAAC,cAAA,UAAQS,QAAS2C,KAAK1C,gBAAtB,qBAzDUmD,sCCkDXiB,EArDD,SAACjF,GAEX,IAAIkF,EAAe,KAEnB,OAASlF,EAAMK,MACX,IAAO,OACH6E,EACIjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,gBAAAgF,OAAWnF,EAAMS,SAAjB,OACAR,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OACJC,KAAK,QACLE,MAAOR,EAAMQ,MACbE,SAAUV,EAAMU,YAGhC,MACJ,IAAO,SACHwE,EACIjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,gBAAAgF,OAAWnF,EAAMS,SAAjB,OACAR,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SACJC,KAAK,QACLE,MAAOR,EAAMQ,MACbE,SAAUV,EAAMU,YAGhC,MACJ,IAAO,SACHwE,EACIjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,gBAAAgF,OAAWnF,EAAMS,SAAjB,OACAR,EAAAC,EAAAC,cAAA,UAAQG,KAAK,QACLI,SAAUV,EAAMU,SAChBF,MAAOR,EAAMQ,OACjBP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,IAAd,UACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,MAAd,MACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,OAAd,SAIZ,MACJ,QACQ0E,EAAe,KAG3B,OACIjF,EAAAC,EAAAC,cAAA,WACK+E,ICsCEE,6MAlFXzD,MAAQ,CACJnB,MAAO,GACP6E,SAAU,GACVC,WAAY,MAShB3E,aAAe,SAACwB,GACZH,EAAKE,SAAS,CACV1B,MAAO2B,EAAMC,OAAO5B,OACrB,kBAAMwB,EAAKuD,qBAGlBA,cAAgB,WACZvD,EAAKL,MAAM0D,SAAS1C,QAAQ6C,QAAQ,SAAA3B,GAChC,GAAG7B,EAAKyD,gBAAgB5B,EAAGrD,MAAOqD,EAAGvC,WAAW,CAC5C,IAAMqB,EAAOb,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAM2D,YAC/B3C,EAAQC,KAAK,CAAEnC,SAAUuB,EAAKL,MAAM0D,SAAS5E,SAAUiF,OAAQ1D,EAAKL,MAAMnB,QAC1EwB,EAAKE,SAAS,CACVmD,SAAUxB,EACVrD,MAAO,GACP8E,WAAY3C,UAM5B8C,gBAAkB,SAACjF,EAAOc,GACtB,MAAiB,MAAdA,EACQqE,OAAO3D,EAAKL,MAAMnB,OAASmF,OAAOnF,GACpB,MAAdc,EACAqE,OAAO3D,EAAKL,MAAMnB,OAASmF,OAAOnF,GAEtCA,IAAUwB,EAAKL,MAAMnB,SAGhCoF,aAAe,SAACzD,GACZA,EAAM0D,iBACN,IAAMC,EAAShE,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAM2D,YACzBQ,EAAUlD,KAAK,CAACnC,SAAUuB,EAAKL,MAAM0D,SAAS5E,SAAUiF,OAAQ1D,EAAKL,MAAMnB,QAC3EwB,EAAKE,SAAS,CACVoD,WAAYQ,GACb,kBAAMf,QAAQC,IAAIhD,EAAKL,MAAM2D,kGAxCxC/B,KAAKrB,SAAS,CACVmD,SAAU9B,KAAKvD,MAAM0C,wCA2CzB,IAAIqD,EAAU,KACRC,EAAOlE,OAAAoB,EAAA,EAAApB,CAAA,GAAOyB,KAAK5B,MAAM0D,UAC5B9B,KAAK5B,MAAM0D,UACoB,IAA3BW,EAAQrD,QAAQF,SACfsD,EAAU9F,EAAAC,EAAAC,cAAA,uCAIlB,IAAI8F,EAAYD,EAAQhD,QAKxB,OAJIgD,EAAQhD,UACRiD,EAAYD,EAAQ3F,MAIpBJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAO8F,SAAU3C,KAAKqC,cAClC3F,EAAAC,EAAAC,cAACgG,EAAD,CACI9F,KAAM4F,EACNxF,SAAUuF,EAAQvF,SAClBH,KAAK,QACLE,MAAO+C,KAAK5B,MAAMnB,MAClBE,SAAU6C,KAAK5C,eAClBoF,EACD9F,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASS,UAAWiF,GAAjC,mBA3ED/B,aC8CJoC,6MA5CXzE,MAAQ,CACJ0E,MAAO,yFAGQ,IAAA/C,EAAAC,KAAA,SAAA+C,IAAA,OAAAA,EAAAxE,OAAAyE,EAAA,EAAAzE,CAAA0E,EAAAtG,EAAAuG,KACf,SAAAC,IAAA,IAAAlC,EAAAC,EAAAkC,EAAAC,EAAA,OAAAJ,EAAAtG,EAAA2G,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEmB3C,IAAIC,KAAK,iBAAkB,GAF9C,YAEQE,EAFRsC,EAAAG,MAIUC,iBAAiBC,SAAS,SAJpC,CAAAL,EAAAE,KAAA,gBAKYvC,EAAKD,EAAGE,YAAY,QAAS,YAC7BiC,EAAQlC,EAAGE,YAAY,SANnCmC,EAAAE,KAAA,EAQkCL,EAAMS,SARxC,cAQYR,EARZE,EAAAG,KAUQzC,EAAG6C,QAVXP,EAAAQ,OAAA,SAYeV,GAZf,QAcIpC,EAAG6C,QAdP,yBAAAP,EAAAS,SAAAb,EAAAnD,UADeiE,MAAAjE,KAAAkE,YAAA,kBAAAnB,EAAAkB,MAAAjE,KAAAkE,YAkBfC,GACKnD,KAAK,SAAAO,GACFxB,EAAKpB,SAAS,CACVmE,MAAOvB,uCAMnB,IAAI6C,EAAW,KAIf,OAHGpE,KAAK5B,MAAM0E,QACVsB,EAAWpE,KAAK5B,MAAM0E,MAAMzC,IAAI,SAACC,EAAG5C,GAAJ,OAAchB,EAAAC,EAAAC,cAACyH,EAAD,CAAM7D,IAAK9C,EAAOyB,KAAMmB,OAGtE5D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wBACCwH,UAvCO3D,aCmBT6D,qBAnBH,SAAC7H,GAST,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OACVH,EAAAC,EAAAC,cAAA,MAAIS,QAXM,WAClBZ,EAAM8H,QAAQlF,KAAK,mBAUX,gBACA3C,EAAAC,EAAAC,cAAA,MAAIS,QARG,WACfZ,EAAM8H,QAAQlF,KAAK,WAOX,aCTVmF,qMAEF1D,IAAIC,KAAK,iBAAkB,EAAG,SAAA0D,GAAS,OAAIA,EAAUC,kBAAkB,QAAS,CAAEC,eAAe,MAC9F3D,KAAK,SAAAC,GAAE,OAAIO,QAAQC,IAAI,qDAI1B,OACE/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAACgI,EAAD,MACAlI,EAAAC,EAAAC,cAACiI,EAAA,EAAD,KACEnI,EAAAC,EAAAC,cAACkI,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWtE,IACvChE,EAAAC,EAAAC,cAACkI,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWnC,aAfvBpC,cAsBH6D,cAAWE,GCnBNS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EACF5I,EAAAC,EAAAC,cAAC2I,EAAA,EAAD,KACI7I,EAAAC,EAAAC,cAAC4I,EAAD,OAIRC,IAASC,OAAOJ,EAAMK,SAASC,eAAe,SDmHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,KAAK,SAAAgF,GACjCA,EAAaC","file":"static/js/main.f2b31c8f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './QuestionInput.css';\n\nconst QuestionInput = (props) => {\n        return (\n            <div>\n                <div>\n                    <div className=\"FormControl\">\n                        <label>Question</label>\n                        <input \n                            type=\"text\" \n                            name=\"question\" \n                            placeholder=\"Your question?\"\n                            value={props.question}\n                            onChange={props.handleChange}/>\n                    </div>\n                    <div className=\"FormControl\">\n                        <label>Type</label>\n                        <select \n                                onChange={props.handleChange}\n                                name=\"type\">\n                            <option value=\"text\">Text</option>\n                            <option value=\"number\">Number</option>\n                            <option value=\"yes/no\">Yes/No</option>\n                        </select>\n                    </div>\n                </div>\n                <button onClick={props.handleAddInput}\n                        disabled={!props.disableAdd}>\n                    Add Sub-Input\n                </button>\n                <button onClick={() => props.handleDelete(props.index)}>\n                    Delete\n                </button>\n                <button onClick={props.handleSave}\n                        disabled={!props.disableSave}>\n                    Save Question\n                </button>\n            </div>\n        )\n}\n\nexport default QuestionInput;","import React from 'react';\n\nconst TextInput = (props) => {\n        return (\n                <div className=\"FormControl\">\n                    <label>Condition</label>\n                    <select>\n                        <option value=\"===\">Equals</option>\n                    </select>\n                    <input \n                        type=\"text\" \n                        name=\"value\" \n                        onChange={props.handleChange} \n                        value={props.value}/>\n                </div>\n        )\n}\n\nexport default TextInput;","import React from 'react';\n\nconst NumberInput = (props) => {\n        return (\n            <div>\n                <div className=\"FormControl\">\n                    <label>Condiotion</label>\n                    <select value={props.condition}\n                            name=\"condition\"\n                            onChange={props.handleChange}>\n                        <option value=\"===\">Equals</option>\n                        <option value=\">\">Greather than</option>\n                        <option value=\"<\">Less than</option>\n                    </select>\n                    <input type=\"number\" \n                           name=\"value\"\n                           onChange={props.handleChange} \n                           value={props.value}/>\n                </div>\n            </div>\n        )\n}\n\nexport default NumberInput;","import React from 'react';\n\nconst RadioInput = (props) =>{\n        return (\n                <div className=\"FormControl\">\n                    <label>Condiotion</label>\n                    <select name=\"condition\" onChange={props.handleChange}>\n                        <option value=\"===\">Equals</option>\n                    </select>\n                    <select name=\"value\" \n                        onChange={props.handleChange}\n                        value={props.value}>\n                        <option value=\"\">Select</option>\n                        <option value=\"no\">No</option>\n                        <option value=\"yes\">Yes</option>\n                    </select>\n                </div>\n        )\n}\n\nexport default RadioInput;","import React from 'react';\n\nimport FormWrapper from '../../containers/FormBuilder/FormWrapper/FormWrapper';\n\nconst BuildWrapper = (props) => {\n    return (\n        <div>\n            <FormWrapper {...props}/>\n        </div>\n    )\n}\n\nexport default BuildWrapper;","import React, { Component } from 'react';\n\nimport QuestionInput from '../../../components/FormBuilder/QuestionInput/QuestionInput';\nimport TextInput from '../../../components/FormBuilder/TextInput/TextInput';\nimport NumberInput from '../../../components/FormBuilder/NumberInput/NumberInput';\nimport RadioInput from '../../../components/FormBuilder/RadioInput/RadioInput';\nimport BuildWrapper from '../../../components/BuildWrapper/BuildWrapper'\n\nclass FormWrapper extends Component {\n    state = {\n        question: '',\n        type: 'text',\n        condition: \"===\",\n        value: '',\n        subInput: []\n    }\n\n    handleDelete = (index) => {\n        const newInputs = [...this.state.subInput]\n        newInputs.splice(index, 1);\n        this.setState({\n            subInput: newInputs\n        })  \n    }\n\n    handleChange = (event) => {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        })\n    }\n\n    handleSubInput = () => {\n        this.props.handleSave(this.handleDataToPush(), this.props.index);\n        let newSubInputs;\n        if(!this.state.subInput.length === 0){\n            newSubInputs = [...this.props.data.answers];\n        } else {\n            newSubInputs = [...this.state.subInput];\n        }\n\n        newSubInputs.push({ type: this.state.type })\n\n        this.setState({\n            subInput: newSubInputs\n        });    \n    }\n\n    handleSave = (dataToPush, index) => {\n        const newState = [...this.state.subInput];\n        const newData = newState[index];\n        newData.question = dataToPush.question;\n        newData.condition = dataToPush.condition;\n        if(!newData.newType){\n            newData.newType = dataToPush.type;\n        }\n        newData.value = dataToPush.value;\n        if(!newData.answers){\n        newData.answers = [];\n        } else {\n            newData.answers = dataToPush.answers;\n        }\n        newState[index] = newData\n\n        this.setState({\n            subInput: newState\n        }, () => {\n            const newSave = {...this.props.data,\n                answers: this.state.subInput}\n\n            this.props.handleSave(newSave, this.props.index);\n        })\n    }\n\n    validateSave = () => {\n        if(this.state.question && (this.props.value || this.state.value) && !this.state.subInput.length){\n            return true;\n        }\n        return false;\n    }\n\n    validateAdd = () => {\n        if(this.state.question && (this.props.value || this.state.value)){\n            return true;\n        }\n        return false;\n    }\n\n    handleDataToPush = () => {\n        const objectToPush = {\n            question: this.state.question,\n            type: this.state.type,\n            condition: this.state.condition,\n            value: this.state.value,\n            answers: []\n        };\n        return objectToPush;\n    }\n\n    render() {\n        let conditionElement;\n        if(this.props.type === \"yes/no\"){\n            conditionElement =  <RadioInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;   \n        } else if(this.props.type === \"text\"){\n            conditionElement = <TextInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;\n        } else if(this.props.type === \"number\"){\n            conditionElement = <NumberInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;\n        }\n\n        return (\n            <div className=\"Margin\">\n                <div className=\"Form\">\n                    {conditionElement}\n                    <QuestionInput \n                        handleChange={this.handleChange}\n                        handleDelete={this.props.handleDelete}\n                        index={this.props.index}\n                        handleSave={() => this.props.handleSave(this.handleDataToPush(), this.props.index)}\n                        handleAddInput={this.handleSubInput}\n                        question={this.state.question}\n                        disableSave={this.validateSave()}\n                        disableAdd={this.validateAdd()}\n                        type={this.state.type}/>\n                </div>\n                {this.state.subInput.map((el,index) => <BuildWrapper \n                                                    type={el.type}\n                                                    key={index}\n                                                    index={index}\n                                                    data={this.state.subInput[index]}\n                                                    handleSave={this.handleSave}\n                                                    handleDelete={(index) => this.handleDelete(index)} />)}\n            </div>\n        )\n    }\n}\n\nexport default FormWrapper;","import React, { Component } from 'react';\nimport idb from 'idb';\n\nimport FormWrapper from './FormWrapper/FormWrapper';\n\nclass FormBuilder extends Component {\n    state = {\n        form: []\n    }\n\n    handleAddInput = () => {\n        const newState = [...this.state.form];\n        newState.push([]);\n        this.setState({\n            form: newState\n        })\n    }\n\n    handleDelete = (index) => {\n        const newState = [...this.state.form];\n        newState.splice(index, 1);\n        this.setState({\n            form: newState\n        })\n    }\n\n    handleSave = (data, index) => {\n        const newForm = [...this.state.form];\n        newForm[index] = data;\n        this.setState({\n            form: newForm\n        })\n    }\n\n    handleSaveForm = (index) => {\n        const data = this.state.form[index];\n            idb.open('db-FormBuilder', 2)\n            .then(db => {\n                let tx = db.transaction('Forms', 'readwrite');\n                let store = tx.objectStore('Forms')\n                store.put(data);\n                return tx.complete;\n            })\n            .then( result => console.log('object stored'))\n    }\n\n    render(){\n        return (\n            <div>\n                <h3>Form builder</h3>\n                {this.state.form.map((form,index) => \n                    <div key={index}>\n                        <FormWrapper \n                                \n                                index={index}\n                                value\n                                data={this.state.form[index]}\n                                handleSave={this.handleSave} \n                                handleDelete={() => this.handleDelete(index)} />\n                        <button onClick={() => this.handleSaveForm(index)}\n                                disabled={!this.state.form[index].question}>Store Form</button>\n                    </div>)}             \n                <button onClick={this.handleAddInput}>Add Input</button>\n            </div>\n        )\n    }\n}\n\nexport default FormBuilder;","import React from 'react';\n\nconst Input = (props) => {\n    \n    let inputElement = null;\n    \n    switch ( props.type ) {\n        case ( 'text' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <input type=\"text\" \n                            name=\"value\" \n                            value={props.value} \n                            onChange={props.onChange} />\n                </div>\n            );\n            break;\n        case ( 'number' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <input type=\"number\" \n                            name=\"value\" \n                            value={props.value} \n                            onChange={props.onChange} />\n                </div>\n            );\n            break;\n        case ( 'yes/no' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <select name=\"value\" \n                            onChange={props.onChange} \n                            value={props.value}>\n                        <option value=\"\">Select</option>\n                        <option value=\"no\">No</option>\n                        <option value=\"yes\">Yes</option>\n                    </select>   \n                </div>\n            );\n            break;\n        default:\n                inputElement = null;\n    }\n\n    return (\n        <div>\n            {inputElement}\n        </div>\n        \n    )\n}\n\nexport default Input;","import React, { Component } from 'react';\n\nimport Input from '../../../components/Input/Input';\n\nclass Form extends Component {\n    state = {\n        value: '',\n        formJson: '',\n        formResult: []\n    }\n\n    componentDidMount(){\n        this.setState({\n            formJson: this.props.data\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            value: event.target.value\n        }, () => this.validateInput())\n    }\n\n    validateInput = () => {\n        this.state.formJson.answers.forEach(el => {\n            if(this.chceckCondition(el.value, el.condition)){\n                const answers = [...this.state.formResult];\n                answers.push({ question: this.state.formJson.question, answer: this.state.value })\n                this.setState({\n                    formJson: el,\n                    value: '',\n                    formResult: answers\n                })\n            }\n        })  \n    }\n\n    chceckCondition = (value, condition) => {\n        if(condition === '>'){\n            return Number(this.state.value) > Number(value);\n        } else if (condition === '<'){\n            return Number(this.state.value) < Number(value);\n        }\n        return value === this.state.value; \n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const newResult = [...this.state.formResult];\n                newResult.push({question: this.state.formJson.question, answer: this.state.value });\n                this.setState({\n                    formResult: newResult\n                }, () => console.log(this.state.formResult) )\n    }\n\n    render(){\n        let endInfo = null;\n        const element = {...this.state.formJson};\n        if(this.state.formJson){\n            if(element.answers.length === 0){\n                endInfo = <p>No more questions. Thanks</p>;\n            }\n        }\n        \n        let inputType = element.newType\n        if(!element.newType){\n            inputType = element.type\n        }\n\n        return (\n            <div>\n                <form className=\"Form\" onSubmit={this.handleSubmit}>\n                    <Input \n                        type={inputType} \n                        question={element.question} \n                        name=\"value\"\n                        value={this.state.value}\n                        onChange={this.handleChange}/>\n                    {endInfo}\n                    <button type=\"submit\" disabled={!endInfo}>Submit</button>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport idb from 'idb';\n\nimport Form from './Form/Form';\n\nclass FormsList extends Component {\n    state = {\n        forms: null\n    }\n\n    componentDidMount(){\n        async function getAllData() {\n           \n            let db = await idb.open('db-FormBuilder', 2)\n\n            if(db.objectStoreNames.contains('Forms')){\n                let tx = db.transaction('Forms', 'readonly')\n                let store = tx.objectStore('Forms')\n            \n                let allSavedItems = await store.getAll()\n            \n                db.close()\n\n                return allSavedItems\n            } \n            db.close();    \n        }\n\n        getAllData()\n            .then(result => {\n                this.setState({\n                    forms: result\n                })\n            });\n    }\n\n    render(){\n        let elements = null;\n        if(this.state.forms){\n            elements = this.state.forms.map((el,index) => <Form key={index} data={el} />);\n        }\n        return (\n            <div>\n                <h3>Your Forms</h3>\n                {elements}\n            </div>\n        )\n    }\n}\n\nexport default FormsList;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport './Nav.css';\n\nconst Nav = (props) => {\n    const handleBuilder = () => {\n        props.history.push('/form-builder');\n    }\n\n    const handleForm = () => {\n        props.history.push('/form');\n    }\n\n    return (\n        <nav>\n            <ul className=\"Nav\">\n                <li onClick={handleBuilder}>Form Builder</li>\n                <li onClick={handleForm}>Form</li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default withRouter(Nav);","import React, { Component } from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport idb from 'idb';\n\nimport FormBuilder from './containers/FormBuilder/FormBuilder';\nimport FormsList from './containers/FormsList/FormsList';\nimport Nav from './components/Nav/Nav';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount(){\n    idb.open('db-FormBuilder', 2, upgradeDB => upgradeDB.createObjectStore('Forms', { autoIncrement: true }))\n      .then(db => console.log(\"Object created\"))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Skygate form</h1>\n        </header>\n        <Nav />\n        <Switch>\n          <Route path=\"/form-builder\" component={FormBuilder} />\n          <Route path=\"/form\" component={FormsList} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n)\n\nReactDOM.render(app , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}