{"version":3,"sources":["components/FromBuilder/QuestinInput/QuestionInput.js","components/FromBuilder/TextInput/TextInput.js","components/FromBuilder/NumberInput/NumberInput.js","components/FromBuilder/RadioInput/RadioInput.js","components/BuildWrapper/BuildWrapper.js","containers/FormBuilder/FormWrapper/FormWrapper.js","containers/FormBuilder/FormBuilder.js","components/Input/Input.js","containers/FormsList/Form/Form.js","containers/FormsList/FormsList.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["QuestionInput","props","react_default","a","createElement","className","type","name","placeholder","value","question","onChange","handleChange","onClick","handleAddInput","disabled","handleDelete","disableDelete","handleSave","TextInput","NumberInput","condition","RadioInput","BuildWrapper","FormBuilder_FormWrapper_FormWrapper","FormWrapper","state","subInput","formObject","newState","_this","map","item","pop","setState","event","target","Object","defineProperty","object","toConsumableArray","push","handleSubImput","components_BuildWrapper_BuildWrapper","saveForm","data","idb","open","then","db","tx","transaction","objectStore","put","complete","result","console","log","validateInputs","this","conditionElement","FromBuilder_RadioInput_RadioInput","FromBuilder_TextInput_TextInput","FromBuilder_NumberInput_NumberInput","FromBuilder_QuestinInput_QuestionInput","Component","FormBuilder","form","index","splice","_this2","key","Input","inputElement","concat","Form","formJson","formResult","checkIndex","length","validateInput","newReasult","objectSpread","answer","Number","handleSubmit","preventDefault","newResult","el","element","endInfo","onSubmit","components_Input_Input","FormsList","forms","_getAllData","asyncToGenerator","regenerator_default","mark","_callee","store","allSavedItems","wrap","_context","prev","next","sent","objectStoreNames","contains","getAll","close","abrupt","stop","apply","arguments","getAllData","elements","FormsList_Form_Form","withRouter","history","App","upgradeDB","createObjectStore","autoIncrement","components_Nav_Nav","Switch","Route","path","component","Boolean","window","location","hostname","match","app","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab0559b6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './QuestionInput.css';\n\nconst QuestionInput = (props) => {\n        return (\n            <div>\n                <div>\n                    <div className=\"FormControl\">\n                        <label>Question</label>\n                        <input \n                            type=\"text\" \n                            name=\"question\" \n                            placeholder=\"Your question?\"\n                            value={props.question}\n                            onChange={props.handleChange}/>\n                    </div>\n                    <div className=\"FormControl\">\n                        <label>Type</label>\n                        <select \n                                value={props.type} \n                                onChange={props.handleChange}\n                                name=\"type\">\n                            <option value=\"text\">Text</option>\n                            <option value=\"number\">Number</option>\n                            <option value=\"yes/no\">Yes/No</option>\n                        </select>\n                    </div>\n                </div>\n                <button onClick={props.handleAddInput}\n                        disabled={!props.disabled}>\n                    Add Sub-Input\n                </button>\n                <button onClick={props.handleDelete}\n                        disabled={props.disableDelete}>\n                    Delete\n                </button>\n                <button onClick={props.handleSave}\n                        disabled={!props.disabled}>\n                    Save Form\n                </button>\n            </div>\n        )\n}\n\nexport default QuestionInput;","import React from 'react';\n\nconst TextInput = (props) => {\n        return (\n                <div className=\"FormControl\">\n                    <label>Condiotion</label>\n                    <select>\n                        <option value=\"===\">Equals</option>\n                    </select>\n                    <input \n                        type=\"text\" \n                        name=\"value\" \n                        onChange={props.handleChange} \n                        value={props.value}/>\n                </div>\n        )\n}\n\nexport default TextInput;","import React from 'react';\n\nconst NumberInput = (props) => {\n        return (\n            <div>\n                <div className=\"FormControl\">\n                    <label>Condiotion</label>\n                    <select value={props.condition}\n                            name=\"condition\"\n                            onChange={props.handleChange}>\n                        <option value=\"===\">Equals</option>\n                        <option value=\">\">Greather than</option>\n                        <option value=\"<\">Less than</option>\n                    </select>\n                    <input type=\"number\" \n                           name=\"value\"\n                           onChange={props.handleChange} \n                           value={props.value}/>\n                </div>\n            </div>\n        )\n}\n\nexport default NumberInput;","import React from 'react';\n\nconst RadioInput = (props) =>{\n        return (\n                <div className=\"FormControl\">\n                    <label>Condiotion</label>\n                    <select name=\"condition\" onChange={props.handleChange}>\n                        <option value=\"===\">Equals</option>\n                    </select>\n                    <select name=\"value\" \n                        onChange={props.handleChange}\n                        value={props.value}>\n                        <option value=\"no\">No</option>\n                        <option value=\"yes\">Yes</option>\n                    </select>\n                </div>\n        )\n}\n\nexport default RadioInput;","import React from 'react';\n\nimport FormWrapper from '../../containers/FormBuilder/FormWrapper/FormWrapper';\n\nconst BuildWrapper = (props) => {\n    return (\n        <div>\n            <FormWrapper {...props}/>\n        </div>\n    )\n}\n\nexport default BuildWrapper;","import React, { Component } from 'react';\nimport idb from 'idb';\n\nimport QuestionInput from '../../../components/FromBuilder/QuestinInput/QuestionInput';\nimport TextInput from '../../../components/FromBuilder/TextInput/TextInput';\nimport NumberInput from '../../../components/FromBuilder/NumberInput/NumberInput';\nimport RadioInput from '../../../components/FromBuilder/RadioInput/RadioInput';\nimport BuildWrapper from '../../../components/BuildWrapper/BuildWrapper'\n\nclass FormWrapper extends Component {\n    state = {\n        question: '',\n        type: 'text',\n        condition: \"===\",\n        value: '',\n        subInput: null,\n        formObject: []\n    }\n\n    componentDidMount(){\n        if(this.props.formObject){\n            this.setState({\n                formObject: this.props.formObject\n            })\n        }\n    }\n\n    handleDelete = () => {\n        const newState = this.state.formObject.map(item => item);\n        newState.pop();\n        this.setState({\n            subInput: null,\n            formObject: newState\n        })  \n    }\n\n    handleChange = (event) => {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        })\n    }\n\n    handleAddInput = () => {\n            const object = {\n                question: this.state.question,\n                type: this.state.type,\n                condition: this.state.condition,\n                value: this.state.value\n            };\n\n            const newState = [...this.state.formObject];\n            newState.push(object);\n\n            this.setState({\n                formObject: newState\n            }, ()=> this.handleSubImput() );\n    }\n\n    handleSubImput = () => {\n        if(this.state.type === \"yes/no\"){\n            this.setState({\n                subInput: <BuildWrapper \n                            type=\"yes/no\"\n                            formObject={this.state.formObject} \n                            handleDelete={this.handleDelete}/>\n            });\n        } else if(this.state.type === \"text\"){\n            this.setState({\n                subInput: <BuildWrapper \n                            type=\"text\" \n                            formObject={this.state.formObject} \n                            handleDelete={this.handleDelete}/>\n            });\n        } else if(this.state.type === \"number\"){\n            this.setState({\n                subInput: <BuildWrapper \n                            type=\"number\" \n                            formObject={this.state.formObject} \n                            handleDelete={this.handleDelete}/>\n            });\n        }\n    }\n\n    handleSave = () => {\n            const object = {\n                question: this.state.question,\n                type: this.state.type,\n                condition: this.state.condition,\n                value: this.state.value\n            };\n\n            const newState = [...this.state.formObject];\n            newState.push(object);\n\n            this.setState({\n                formObject: newState\n            }, ()=> this.saveForm() );\n    }\n\n    saveForm = () => {\n        const data = this.state.formObject;\n            idb.open('db-FormBuilder', 2)\n            .then(db => {\n                let tx = db.transaction('Forms', 'readwrite');\n                let store = tx.objectStore('Forms')\n                store.put(data);\n                return tx.complete;\n            })\n            .then( result => console.log('object stored'))\n    }\n\n    validateInputs = () => {\n        if(this.state.question && (this.props.value || this.state.value) && !this.state.subInput){\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        let conditionElement;\n        if(this.props.type === \"yes/no\"){\n            conditionElement =  <RadioInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;   \n        } else if(this.props.type === \"text\"){\n            conditionElement = <TextInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;\n        } else if(this.props.type === \"number\"){\n            conditionElement = <NumberInput \n                                    handleChange={this.handleChange} \n                                    value={this.state.value} \n                                    condition={this.state.condition}/>;\n        }\n\n        return (\n            <div>\n                <div className=\"Form\">\n                    {conditionElement}\n                    <QuestionInput \n                        handleChange={this.handleChange}\n                        handleDelete={this.props.handleDelete}\n                        handleSave={this.handleSave}\n                        handleAddInput={this.handleAddInput}\n                        formObject={this.state.formObject}\n                        question={this.state.question}\n                        disabled={this.validateInputs()}\n                        disableDelete={this.state.subInput}\n                        type={this.state.type}/>\n                </div>\n                {this.state.subInput}\n            </div>\n        )\n    }\n}\n\nexport default FormWrapper;","import React, { Component } from 'react';\n\nimport FormWrapper from './FormWrapper/FormWrapper';\n\nclass FormBuilder extends Component {\n    state = {\n        form: []\n    }\n\n    handleAddInput = () => {\n        const newState = [...this.state.form];\n        newState.push([]);\n        this.setState({\n            form: newState\n        })\n    }\n\n    handleDelete = (index) => {\n        const newState = [...this.state.form];\n        newState.splice(index, 1);\n        this.setState({\n            form: newState\n        })\n    }\n\n    render(){\n        return (\n            <div>\n                <h3>Form builder</h3>\n                {this.state.form.map((form,index) => \n                    <FormWrapper \n                            key={index}\n                            value \n                            handleDelete={() => this.handleDelete(index)} />)}             \n                <button onClick={this.handleAddInput}>Add Input</button>\n            </div>\n        )\n    }\n}\n\nexport default FormBuilder;","import React from 'react';\n\nconst Input = (props) => {\n    \n    let inputElement = null;\n    \n    switch ( props.type ) {\n        case ( 'text' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <input type=\"text\" \n                            name=\"value\" \n                            value={props.value} \n                            onChange={props.onChange} />\n                </div>\n            );\n            break;\n        case ( 'number' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <input type=\"number\" \n                            name=\"value\" \n                            value={props.value} \n                            onChange={props.onChange} />\n                </div>\n            );\n            break;\n        case ( 'yes/no' ):\n            inputElement = (\n                <div className=\"FormControl\">\n                    <label>{`${props.question}? `}</label>\n                    <select name=\"value\" \n                            onChange={props.onChange} \n                            value={props.value}>\n                        <option value=\"no\">No</option>\n                        <option value=\"yes\">Yes</option>\n                    </select>   \n                </div>\n            );\n            break;\n        default:\n                inputElement = null;\n    }\n\n    return (\n        <div>\n            {inputElement}\n        </div>\n        \n    )\n}\n\nexport default Input;","import React, { Component } from 'react';\n\nimport Input from '../../../components/Input/Input';\n\nclass Form extends Component {\n    state = {\n        value: '',\n        formJson: '',\n        formResult: [],\n        index: 0\n    }\n\n    componentDidMount(){\n        const newResult = this.props.data.map( el => [ el.question ] )\n        this.setState({\n            formJson: this.props.data,\n            formResult: newResult\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            value: event.target.value\n        }, () => {\n            this.checkIndex();\n        })\n    }\n\n    checkIndex = () => {\n        if(this.state.index < this.state.formJson.length-1){\n            this.validateInput();\n        }\n    }\n\n    validateInput = () => {\n        if(this.state.formJson[this.state.index + 1].condition === \"===\"){\n            if(this.state.formJson[this.state.index + 1].value === this.state.value){\n                const newReasult = {...this.state.formResult};\n                newReasult[this.state.index].answer = this.state.value\n                this.setState({\n                    formResult: newReasult,\n                    index: this.state.index + 1,\n                    value: ''\n                })\n            }\n        } else if(this.state.formJson[this.state.index + 1].condition === \">\"){\n            if(Number(this.state.formJson[this.state.index + 1].value) < Number(this.state.value)){\n                const newReasult = {...this.state.formResult};\n                newReasult[this.state.index].answer = this.state.value\n                this.setState({\n                    formResult: newReasult,\n                    index: this.state.index + 1,\n                    value: ''\n                })\n            }\n        } else if(this.state.formJson[this.state.index + 1].condition === \"<\"){\n            if(Number(this.state.formJson[this.state.index + 1].value) > Number(this.state.value)){\n                const newReasult = {...this.state.formResult};\n                newReasult[this.state.index].answer = this.state.value\n                this.setState({\n                    formResult: newReasult,\n                    index: this.state.index + 1,\n                    value: ''\n                })\n            }\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const newReasult = {...this.state.formResult};\n                newReasult[this.state.index].answer = this.state.value\n                this.setState({\n                    formResult: newReasult\n                }, () => console.log(this.state.formResult) )\n    }\n\n    render(){\n    \n        const element = this.props.data[this.state.index];\n        let endInfo = null;\n        \n        if(this.state.index === this.state.formJson.length-1){\n            endInfo = <p>No more questions. Thanks</p>\n        }\n\n        return (\n            <div>\n                <form className=\"Form\" onSubmit={this.handleSubmit}>\n                    <Input \n                        type={element.type} \n                        question={element.question} \n                        name=\"value\"\n                        value={this.state.value}\n                        onChange={this.handleChange}/>\n                    {endInfo}\n                    <button type=\"submit\" disabled={!endInfo}>Submit</button>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport idb from 'idb';\n\nimport Form from './Form/Form';\n\nclass FormsList extends Component {\n    state = {\n        forms: null\n    }\n\n    componentDidMount(){\n        async function getAllData() {\n           \n            let db = await idb.open('db-FormBuilder', 2)\n\n            if(db.objectStoreNames.contains('Forms')){\n                let tx = db.transaction('Forms', 'readonly')\n                let store = tx.objectStore('Forms')\n            \n                let allSavedItems = await store.getAll()\n            \n                db.close()\n\n                return allSavedItems\n            } \n            db.close();    \n        }\n\n        getAllData()\n            .then(result => {\n                this.setState({\n                    forms: result\n                })\n            });\n    }\n\n    render(){\n        let elements = null;\n        if(this.state.forms){\n            elements = this.state.forms.map((el,index) => <Form key={index} data={el} />);\n        }\n        return (\n            <div>\n                <h3>Your Forms</h3>\n                {elements}\n            </div>\n        )\n    }\n}\n\nexport default FormsList;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport './Nav.css';\n\nconst Nav = (props) => {\n    const handleBuilder = () => {\n        props.history.push('/form-builder');\n    }\n\n    const handleForm = () => {\n        props.history.push('/form');\n    }\n\n    return (\n        <nav>\n            <ul className=\"Nav\">\n                <li onClick={handleBuilder}>Form Builder</li>\n                <li onClick={handleForm}>From</li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default withRouter(Nav);","import React, { Component } from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport idb from 'idb';\n\nimport FormBuilder from './containers/FormBuilder/FormBuilder';\nimport FormsList from './containers/FormsList/FormsList';\nimport Nav from './components/Nav/Nav';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount(){\n    idb.open('db-FormBuilder', 2, upgradeDB => upgradeDB.createObjectStore('Forms', { autoIncrement: true }))\n      .then(db => console.log(\"Object created\"))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Skygate form</h1>\n        </header>\n        <Nav />\n        <Switch>\n          <Route path=\"/form-builder\" component={FormBuilder} />\n          <Route path=\"/form\" component={FormsList} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n)\n\nReactDOM.render(app , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}